# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from pagarmeapisdk.configuration import Configuration
from pagarmeapisdk.controllers.base_controller import BaseController
from pagarmeapisdk.configuration import Environment
from pagarmeapisdk.http.auth.basic_auth import BasicAuth
from pagarmeapisdk.controllers.subscriptions_controller\
    import SubscriptionsController
from pagarmeapisdk.controllers.orders_controller import OrdersController
from pagarmeapisdk.controllers.plans_controller import PlansController
from pagarmeapisdk.controllers.invoices_controller import InvoicesController
from pagarmeapisdk.controllers.customers_controller import CustomersController
from pagarmeapisdk.controllers.charges_controller import ChargesController
from pagarmeapisdk.controllers.recipients_controller\
    import RecipientsController
from pagarmeapisdk.controllers.tokens_controller import TokensController
from pagarmeapisdk.controllers.transactions_controller\
    import TransactionsController
from pagarmeapisdk.controllers.transfers_controller import TransfersController
from pagarmeapisdk.controllers.payables_controller import PayablesController
from pagarmeapisdk.controllers.balance_operations_controller\
    import BalanceOperationsController


class PagarmeapisdkClient(object):
    @LazyProperty
    def subscriptions(self):
        return SubscriptionsController(self.global_configuration)

    @LazyProperty
    def orders(self):
        return OrdersController(self.global_configuration)

    @LazyProperty
    def plans(self):
        return PlansController(self.global_configuration)

    @LazyProperty
    def invoices(self):
        return InvoicesController(self.global_configuration)

    @LazyProperty
    def customers(self):
        return CustomersController(self.global_configuration)

    @LazyProperty
    def charges(self):
        return ChargesController(self.global_configuration)

    @LazyProperty
    def recipients(self):
        return RecipientsController(self.global_configuration)

    @LazyProperty
    def tokens(self):
        return TokensController(self.global_configuration)

    @LazyProperty
    def transactions(self):
        return TransactionsController(self.global_configuration)

    @LazyProperty
    def transfers(self):
        return TransfersController(self.global_configuration)

    @LazyProperty
    def payables(self):
        return PayablesController(self.global_configuration)

    @LazyProperty
    def balance_operations(self):
        return BalanceOperationsController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=None, retry_methods=None,
                 environment=Environment.PRODUCTION, basic_auth_user_name=None,
                 basic_auth_password=None, basic_auth_credentials=None,
                 service_referer_name='TODO: Replace', config=None):
        self.config = config or Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment, basic_auth_user_name=basic_auth_user_name,
            basic_auth_password=basic_auth_password,
            basic_auth_credentials=basic_auth_credentials,
            service_referer_name=service_referer_name)

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())\
            .global_header('ServiceRefererName', self.config.service_referer_name)

        self.auth_managers = {key: None for key in ['httpBasic']}
        self.auth_managers['httpBasic'] = BasicAuth(
            self.config.basic_auth_credentials)
        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

