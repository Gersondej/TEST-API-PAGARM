# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.configuration import Server
from pagarmeapisdk.controllers.base_controller import BaseController
from pagarmeapisdk.http.auth.basic_auth import BasicAuth
from pagarmeapisdk.models.get_seller_response import GetSellerResponse
from pagarmeapisdk.models.list_seller_response import ListSellerResponse


class SellersController(BaseController):

    """A Controller to access Endpoints in the pagarmeapisdk API."""

    def __init__(self, config, call_back=None):
        super(SellersController, self).__init__(config, call_back)

    def create_seller(self,
                      request,
                      idempotency_key=None):
        """Does a POST request to /sellers/.

        TODO: type endpoint description here.

        Args:
            request (CreateSellerRequest): Seller Model
            idempotency_key (string, optional): TODO: type description here.

        Returns:
            GetSellerResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/sellers/'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'idempotency-key': idempotency_key
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))
        BasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, GetSellerResponse.from_dictionary)

        return decoded

    def update_seller_metadata(self,
                               seller_id,
                               request,
                               idempotency_key=None):
        """Does a PATCH request to /sellers/{seller_id}/metadata.

        TODO: type endpoint description here.

        Args:
            seller_id (string): Seller Id
            request (UpdateMetadataRequest): Request for updating the charge
                metadata
            idempotency_key (string, optional): TODO: type description here.

        Returns:
            GetSellerResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/sellers/{seller_id}/metadata'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'seller_id': {'value': seller_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'idempotency-key': idempotency_key
        }

        # Prepare and execute request
        _request = self.config.http_client.patch(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))
        BasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, GetSellerResponse.from_dictionary)

        return decoded

    def update_seller(self,
                      id,
                      request,
                      idempotency_key=None):
        """Does a PUT request to /sellers/{id}.

        TODO: type endpoint description here.

        Args:
            id (string): TODO: type description here.
            request (UpdateSellerRequest): Update Seller model
            idempotency_key (string, optional): TODO: type description here.

        Returns:
            GetSellerResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/sellers/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'idempotency-key': idempotency_key
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))
        BasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, GetSellerResponse.from_dictionary)

        return decoded

    def delete_seller(self,
                      seller_id,
                      idempotency_key=None):
        """Does a DELETE request to /sellers/{sellerId}.

        TODO: type endpoint description here.

        Args:
            seller_id (string): Seller Id
            idempotency_key (string, optional): TODO: type description here.

        Returns:
            GetSellerResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/sellers/{sellerId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'sellerId': {'value': seller_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'idempotency-key': idempotency_key
        }

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url, headers=_headers)
        BasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, GetSellerResponse.from_dictionary)

        return decoded

    def get_seller_by_id(self,
                         id):
        """Does a GET request to /sellers/{id}.

        TODO: type endpoint description here.

        Args:
            id (string): Seller Id

        Returns:
            GetSellerResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/sellers/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        BasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, GetSellerResponse.from_dictionary)

        return decoded

    def get_sellers(self,
                    page=None,
                    size=None,
                    name=None,
                    document=None,
                    code=None,
                    status=None,
                    mtype=None,
                    created_since=None,
                    created_until=None):
        """Does a GET request to /sellers.

        TODO: type endpoint description here.

        Args:
            page (int, optional): Page number
            size (int, optional): Page size
            name (string, optional): TODO: type description here.
            document (string, optional): TODO: type description here.
            code (string, optional): TODO: type description here.
            status (string, optional): TODO: type description here.
            mtype (string, optional): TODO: type description here.
            created_since (datetime, optional): TODO: type description here.
            created_until (datetime, optional): TODO: type description here.

        Returns:
            ListSellerResponse: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/sellers'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'page': page,
            'size': size,
            'name': name,
            'document': document,
            'code': code,
            'status': status,
            'type': mtype,
            'created_Since': APIHelper.when_defined(APIHelper.RFC3339DateTime, created_since),
            'created_Until': APIHelper.when_defined(APIHelper.RFC3339DateTime, created_until)
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        BasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ListSellerResponse.from_dictionary)

        return decoded
