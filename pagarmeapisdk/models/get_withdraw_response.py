# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.get_withdraw_source_response import GetWithdrawSourceResponse
from pagarmeapisdk.models.get_withdraw_target_response import GetWithdrawTargetResponse


class GetWithdrawResponse(object):

    """Implementation of the 'GetWithdrawResponse' model.

    TODO: type model description here.

    Attributes:
        id (str): TODO: type description here.
        gateway_id (str): TODO: type description here.
        amount (int): TODO: type description here.
        status (str): TODO: type description here.
        created_at (datetime): TODO: type description here.
        updated_at (datetime): TODO: type description here.
        metadata (List[str]): TODO: type description here.
        fee (int): TODO: type description here.
        funding_date (datetime): TODO: type description here.
        funding_estimated_date (datetime): TODO: type description here.
        mtype (str): TODO: type description here.
        source (GetWithdrawSourceResponse): TODO: type description here.
        target (GetWithdrawTargetResponse): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "gateway_id": 'gateway_id',
        "amount": 'amount',
        "status": 'status',
        "created_at": 'created_at',
        "updated_at": 'updated_at',
        "metadata": 'metadata',
        "fee": 'fee',
        "funding_date": 'funding_date',
        "funding_estimated_date": 'funding_estimated_date',
        "mtype": 'type',
        "source": 'source',
        "target": 'target'
    }

    _optionals = [
        'id',
        'gateway_id',
        'amount',
        'status',
        'created_at',
        'updated_at',
        'metadata',
        'fee',
        'funding_date',
        'funding_estimated_date',
        'mtype',
        'source',
        'target',
    ]

    _nullables = [
        'id',
        'gateway_id',
        'amount',
        'status',
        'created_at',
        'updated_at',
        'metadata',
        'fee',
        'funding_date',
        'funding_estimated_date',
        'mtype',
        'source',
        'target',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 gateway_id=APIHelper.SKIP,
                 amount=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 updated_at=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 fee=APIHelper.SKIP,
                 funding_date=APIHelper.SKIP,
                 funding_estimated_date=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 source=APIHelper.SKIP,
                 target=APIHelper.SKIP):
        """Constructor for the GetWithdrawResponse class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if gateway_id is not APIHelper.SKIP:
            self.gateway_id = gateway_id 
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if status is not APIHelper.SKIP:
            self.status = status 
        if created_at is not APIHelper.SKIP:
            self.created_at = APIHelper.apply_datetime_converter(created_at, APIHelper.RFC3339DateTime) if created_at else None 
        if updated_at is not APIHelper.SKIP:
            self.updated_at = APIHelper.apply_datetime_converter(updated_at, APIHelper.RFC3339DateTime) if updated_at else None 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if fee is not APIHelper.SKIP:
            self.fee = fee 
        if funding_date is not APIHelper.SKIP:
            self.funding_date = APIHelper.apply_datetime_converter(funding_date, APIHelper.RFC3339DateTime) if funding_date else None 
        if funding_estimated_date is not APIHelper.SKIP:
            self.funding_estimated_date = APIHelper.apply_datetime_converter(funding_estimated_date, APIHelper.RFC3339DateTime) if funding_estimated_date else None 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if source is not APIHelper.SKIP:
            self.source = source 
        if target is not APIHelper.SKIP:
            self.target = target 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if "id" in dictionary.keys() else APIHelper.SKIP
        gateway_id = dictionary.get("gateway_id") if "gateway_id" in dictionary.keys() else APIHelper.SKIP
        amount = dictionary.get("amount") if "amount" in dictionary.keys() else APIHelper.SKIP
        status = dictionary.get("status") if "status" in dictionary.keys() else APIHelper.SKIP
        if 'created_at' in dictionary.keys():
            created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("created_at")).datetime if dictionary.get("created_at") else None
        else:
            created_at = APIHelper.SKIP
        if 'updated_at' in dictionary.keys():
            updated_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("updated_at")).datetime if dictionary.get("updated_at") else None
        else:
            updated_at = APIHelper.SKIP
        metadata = dictionary.get("metadata") if "metadata" in dictionary.keys() else APIHelper.SKIP
        fee = dictionary.get("fee") if "fee" in dictionary.keys() else APIHelper.SKIP
        if 'funding_date' in dictionary.keys():
            funding_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("funding_date")).datetime if dictionary.get("funding_date") else None
        else:
            funding_date = APIHelper.SKIP
        if 'funding_estimated_date' in dictionary.keys():
            funding_estimated_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("funding_estimated_date")).datetime if dictionary.get("funding_estimated_date") else None
        else:
            funding_estimated_date = APIHelper.SKIP
        mtype = dictionary.get("type") if "type" in dictionary.keys() else APIHelper.SKIP
        if 'source' in dictionary.keys():
            source = GetWithdrawSourceResponse.from_dictionary(dictionary.get('source')) if dictionary.get('source') else None
        else:
            source = APIHelper.SKIP
        if 'target' in dictionary.keys():
            target = GetWithdrawTargetResponse.from_dictionary(dictionary.get('target')) if dictionary.get('target') else None
        else:
            target = APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   gateway_id,
                   amount,
                   status,
                   created_at,
                   updated_at,
                   metadata,
                   fee,
                   funding_date,
                   funding_estimated_date,
                   mtype,
                   source,
                   target)
