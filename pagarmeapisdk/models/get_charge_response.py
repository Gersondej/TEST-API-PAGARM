# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.get_customer_response import GetCustomerResponse
from pagarmeapisdk.models.get_invoice_response import *
from pagarmeapisdk.models.get_order_response import *
from pagarmeapisdk.models.get_transaction_response import GetTransactionResponse


class GetChargeResponse(object):

    """Implementation of the 'GetChargeResponse' model.

    Response object for getting a charge

    Attributes:
        id (str): TODO: type description here.
        code (str): TODO: type description here.
        gateway_id (str): TODO: type description here.
        amount (int): TODO: type description here.
        status (str): TODO: type description here.
        currency (str): TODO: type description here.
        payment_method (str): TODO: type description here.
        due_at (datetime): TODO: type description here.
        created_at (datetime): TODO: type description here.
        updated_at (datetime): TODO: type description here.
        last_transaction (GetTransactionResponse): TODO: type description
            here.
        invoice (GetInvoiceResponse): TODO: type description here.
        order (GetOrderResponse): TODO: type description here.
        customer (GetCustomerResponse): TODO: type description here.
        metadata (Dict[str, str]): TODO: type description here.
        paid_at (datetime): TODO: type description here.
        canceled_at (datetime): TODO: type description here.
        canceled_amount (int): Canceled Amount
        paid_amount (int): Paid amount
        interest_and_fine_paid (int): interest and fine paid
        recurrency_cycle (str): Defines whether the card has been used one or
            more times.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "code": 'code',
        "gateway_id": 'gateway_id',
        "amount": 'amount',
        "status": 'status',
        "currency": 'currency',
        "payment_method": 'payment_method',
        "due_at": 'due_at',
        "created_at": 'created_at',
        "updated_at": 'updated_at',
        "last_transaction": 'last_transaction',
        "invoice": 'invoice',
        "order": 'order',
        "customer": 'customer',
        "metadata": 'metadata',
        "paid_at": 'paid_at',
        "canceled_at": 'canceled_at',
        "canceled_amount": 'canceled_amount',
        "paid_amount": 'paid_amount',
        "interest_and_fine_paid": 'interest_and_fine_paid',
        "recurrency_cycle": 'recurrency_cycle'
    }

    _optionals = [
        'id',
        'code',
        'gateway_id',
        'amount',
        'status',
        'currency',
        'payment_method',
        'due_at',
        'created_at',
        'updated_at',
        'last_transaction',
        'invoice',
        'order',
        'customer',
        'metadata',
        'paid_at',
        'canceled_at',
        'canceled_amount',
        'paid_amount',
        'interest_and_fine_paid',
        'recurrency_cycle',
    ]

    _nullables = [
        'id',
        'code',
        'gateway_id',
        'amount',
        'status',
        'currency',
        'payment_method',
        'due_at',
        'created_at',
        'updated_at',
        'last_transaction',
        'invoice',
        'order',
        'customer',
        'metadata',
        'paid_at',
        'canceled_at',
        'canceled_amount',
        'paid_amount',
        'interest_and_fine_paid',
        'recurrency_cycle',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 code=APIHelper.SKIP,
                 gateway_id=APIHelper.SKIP,
                 amount=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 currency=APIHelper.SKIP,
                 payment_method=APIHelper.SKIP,
                 due_at=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 updated_at=APIHelper.SKIP,
                 last_transaction=APIHelper.SKIP,
                 invoice=APIHelper.SKIP,
                 order=APIHelper.SKIP,
                 customer=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 paid_at=APIHelper.SKIP,
                 canceled_at=APIHelper.SKIP,
                 canceled_amount=APIHelper.SKIP,
                 paid_amount=APIHelper.SKIP,
                 interest_and_fine_paid=APIHelper.SKIP,
                 recurrency_cycle=APIHelper.SKIP):
        """Constructor for the GetChargeResponse class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if code is not APIHelper.SKIP:
            self.code = code 
        if gateway_id is not APIHelper.SKIP:
            self.gateway_id = gateway_id 
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if status is not APIHelper.SKIP:
            self.status = status 
        if currency is not APIHelper.SKIP:
            self.currency = currency 
        if payment_method is not APIHelper.SKIP:
            self.payment_method = payment_method 
        if due_at is not APIHelper.SKIP:
            self.due_at = APIHelper.apply_datetime_converter(due_at, APIHelper.RFC3339DateTime) if due_at else None 
        if created_at is not APIHelper.SKIP:
            self.created_at = APIHelper.apply_datetime_converter(created_at, APIHelper.RFC3339DateTime) if created_at else None 
        if updated_at is not APIHelper.SKIP:
            self.updated_at = APIHelper.apply_datetime_converter(updated_at, APIHelper.RFC3339DateTime) if updated_at else None 
        if last_transaction is not APIHelper.SKIP:
            self.last_transaction = last_transaction 
        if invoice is not APIHelper.SKIP:
            self.invoice = invoice 
        if order is not APIHelper.SKIP:
            self.order = order 
        if customer is not APIHelper.SKIP:
            self.customer = customer 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if paid_at is not APIHelper.SKIP:
            self.paid_at = APIHelper.apply_datetime_converter(paid_at, APIHelper.RFC3339DateTime) if paid_at else None 
        if canceled_at is not APIHelper.SKIP:
            self.canceled_at = APIHelper.apply_datetime_converter(canceled_at, APIHelper.RFC3339DateTime) if canceled_at else None 
        if canceled_amount is not APIHelper.SKIP:
            self.canceled_amount = canceled_amount 
        if paid_amount is not APIHelper.SKIP:
            self.paid_amount = paid_amount 
        if interest_and_fine_paid is not APIHelper.SKIP:
            self.interest_and_fine_paid = interest_and_fine_paid 
        if recurrency_cycle is not APIHelper.SKIP:
            self.recurrency_cycle = recurrency_cycle 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if "id" in dictionary.keys() else APIHelper.SKIP
        code = dictionary.get("code") if "code" in dictionary.keys() else APIHelper.SKIP
        gateway_id = dictionary.get("gateway_id") if "gateway_id" in dictionary.keys() else APIHelper.SKIP
        amount = dictionary.get("amount") if "amount" in dictionary.keys() else APIHelper.SKIP
        status = dictionary.get("status") if "status" in dictionary.keys() else APIHelper.SKIP
        currency = dictionary.get("currency") if "currency" in dictionary.keys() else APIHelper.SKIP
        payment_method = dictionary.get("payment_method") if "payment_method" in dictionary.keys() else APIHelper.SKIP
        if 'due_at' in dictionary.keys():
            due_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("due_at")).datetime if dictionary.get("due_at") else None
        else:
            due_at = APIHelper.SKIP
        if 'created_at' in dictionary.keys():
            created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("created_at")).datetime if dictionary.get("created_at") else None
        else:
            created_at = APIHelper.SKIP
        if 'updated_at' in dictionary.keys():
            updated_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("updated_at")).datetime if dictionary.get("updated_at") else None
        else:
            updated_at = APIHelper.SKIP
        if 'last_transaction' in dictionary.keys():
            last_transaction = GetTransactionResponse.from_dictionary(dictionary.get('last_transaction')) if dictionary.get('last_transaction') else None
        else:
            last_transaction = APIHelper.SKIP
        if 'invoice' in dictionary.keys():
            invoice = GetInvoiceResponse.from_dictionary(dictionary.get('invoice')) if dictionary.get('invoice') else None
        else:
            invoice = APIHelper.SKIP
        if 'order' in dictionary.keys():
            order = GetOrderResponse.from_dictionary(dictionary.get('order')) if dictionary.get('order') else None
        else:
            order = APIHelper.SKIP
        if 'customer' in dictionary.keys():
            customer = GetCustomerResponse.from_dictionary(dictionary.get('customer')) if dictionary.get('customer') else None
        else:
            customer = APIHelper.SKIP
        metadata = dictionary.get("metadata") if "metadata" in dictionary.keys() else APIHelper.SKIP
        if 'paid_at' in dictionary.keys():
            paid_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("paid_at")).datetime if dictionary.get("paid_at") else None
        else:
            paid_at = APIHelper.SKIP
        if 'canceled_at' in dictionary.keys():
            canceled_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("canceled_at")).datetime if dictionary.get("canceled_at") else None
        else:
            canceled_at = APIHelper.SKIP
        canceled_amount = dictionary.get("canceled_amount") if "canceled_amount" in dictionary.keys() else APIHelper.SKIP
        paid_amount = dictionary.get("paid_amount") if "paid_amount" in dictionary.keys() else APIHelper.SKIP
        interest_and_fine_paid = dictionary.get("interest_and_fine_paid") if "interest_and_fine_paid" in dictionary.keys() else APIHelper.SKIP
        recurrency_cycle = dictionary.get("recurrency_cycle") if "recurrency_cycle" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   code,
                   gateway_id,
                   amount,
                   status,
                   currency,
                   payment_method,
                   due_at,
                   created_at,
                   updated_at,
                   last_transaction,
                   invoice,
                   order,
                   customer,
                   metadata,
                   paid_at,
                   canceled_at,
                   canceled_amount,
                   paid_amount,
                   interest_and_fine_paid,
                   recurrency_cycle)
