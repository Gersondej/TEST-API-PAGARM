# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.create_antifraud_request import CreateAntifraudRequest
from pagarmeapisdk.models.create_customer_request import CreateCustomerRequest
from pagarmeapisdk.models.create_payment_request import CreatePaymentRequest


class CreateChargeRequest(object):

    """Implementation of the 'CreateChargeRequest' model.

    Request for creating a new charge

    Attributes:
        code (string): Code
        amount (int): The amount of the charge, in cents
        customer_id (string): The customer's id
        customer (CreateCustomerRequest): Customer data
        payment (CreatePaymentRequest): Payment data
        metadata (dict): Metadata
        due_at (datetime): The charge due date
        antifraud (CreateAntifraudRequest): TODO: type description here.
        order_id (string): Order Id

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "amount": 'amount',
        "payment": 'payment',
        "order_id": 'order_id',
        "code": 'code',
        "customer_id": 'customer_id',
        "customer": 'customer',
        "metadata": 'metadata',
        "due_at": 'due_at',
        "antifraud": 'antifraud'
    }

    _optionals = [
        'code',
        'customer_id',
        'customer',
        'metadata',
        'due_at',
        'antifraud',
    ]

    _nullables = [
        'code',
        'customer_id',
        'customer',
        'metadata',
        'due_at',
        'antifraud',
    ]

    def __init__(self,
                 amount=None,
                 payment=None,
                 order_id=None,
                 code=APIHelper.SKIP,
                 customer_id=APIHelper.SKIP,
                 customer=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 due_at=APIHelper.SKIP,
                 antifraud=APIHelper.SKIP):
        """Constructor for the CreateChargeRequest class"""

        # Initialize members of the class
        if code is not APIHelper.SKIP:
            self.code = code 
        self.amount = amount 
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if customer is not APIHelper.SKIP:
            self.customer = customer 
        self.payment = payment 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if due_at is not APIHelper.SKIP:
            self.due_at = APIHelper.RFC3339DateTime(due_at) if due_at else None 
        if antifraud is not APIHelper.SKIP:
            self.antifraud = antifraud 
        self.order_id = order_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        amount = dictionary.get("amount") if dictionary.get("amount") else None
        payment = CreatePaymentRequest.from_dictionary(dictionary.get('payment')) if dictionary.get('payment') else None
        order_id = dictionary.get("order_id") if dictionary.get("order_id") else None
        code = dictionary.get("code") if "code" in dictionary.keys() else APIHelper.SKIP
        customer_id = dictionary.get("customer_id") if "customer_id" in dictionary.keys() else APIHelper.SKIP
        if 'customer' in dictionary.keys():
            customer = CreateCustomerRequest.from_dictionary(dictionary.get('customer')) if dictionary.get('customer') else None
        else:
            customer = APIHelper.SKIP
        metadata = dictionary.get("metadata") if "metadata" in dictionary.keys() else APIHelper.SKIP
        if 'due_at' in dictionary.keys():
            due_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("due_at")).datetime if dictionary.get("due_at") else None
        else:
            due_at = APIHelper.SKIP
        if 'antifraud' in dictionary.keys():
            antifraud = CreateAntifraudRequest.from_dictionary(dictionary.get('antifraud')) if dictionary.get('antifraud') else None
        else:
            antifraud = APIHelper.SKIP
        # Return an object of this model
        return cls(amount,
                   payment,
                   order_id,
                   code,
                   customer_id,
                   customer,
                   metadata,
                   due_at,
                   antifraud)
