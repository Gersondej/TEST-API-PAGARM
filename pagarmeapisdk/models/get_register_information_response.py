# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.get_managing_partner_response import GetManagingPartnerResponse
from pagarmeapisdk.models.get_phone_number_response import GetPhoneNumberResponse
from pagarmeapisdk.models.get_register_information_address_response import GetRegisterInformationAddressResponse


class GetRegisterInformationResponse(object):

    """Implementation of the 'GetRegisterInformationResponse' model.

    Response object for getting an RegisterInformationResponse

    Attributes:
        email (str): TODO: type description here.
        document (str): TODO: type description here.
        mtype (str): TODO: type description here.
        site_url (str): TODO: type description here.
        phone_numbers (List[GetPhoneNumberResponse]): TODO: type description
            here.
        name (str): TODO: type description here.
        mother_name (str): TODO: type description here.
        birthdate (str): TODO: type description here.
        monthly_income (str): TODO: type description here.
        professional_occupation (str): TODO: type description here.
        address (GetRegisterInformationAddressResponse): TODO: type
            description here.
        company_name (str): TODO: type description here.
        trading_name (str): TODO: type description here.
        annual_revenue (str): TODO: type description here.
        corporation_type (str): TODO: type description here.
        founding_date (str): TODO: type description here.
        cnae (str): TODO: type description here.
        main_address (GetRegisterInformationAddressResponse): TODO: type
            description here.
        managing_partners (List[GetManagingPartnerResponse]): TODO: type
            description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "email": 'email',
        "document": 'document',
        "mtype": 'type',
        "site_url": 'site_url',
        "phone_numbers": 'phone_numbers',
        "name": 'name',
        "mother_name": 'mother_name',
        "birthdate": 'birthdate',
        "monthly_income": 'monthly_income',
        "professional_occupation": 'professional_occupation',
        "address": 'address',
        "company_name": 'company_name',
        "trading_name": 'trading_name',
        "annual_revenue": 'annual_revenue',
        "corporation_type": 'corporation_type',
        "founding_date": 'founding_date',
        "cnae": 'cnae',
        "main_address": 'main_address',
        "managing_partners": 'managing_partners'
    }

    _optionals = [
        'email',
        'document',
        'mtype',
        'site_url',
        'phone_numbers',
        'name',
        'mother_name',
        'birthdate',
        'monthly_income',
        'professional_occupation',
        'address',
        'company_name',
        'trading_name',
        'annual_revenue',
        'corporation_type',
        'founding_date',
        'cnae',
        'main_address',
        'managing_partners',
    ]

    _nullables = [
        'email',
        'document',
        'mtype',
        'site_url',
        'phone_numbers',
        'name',
        'mother_name',
        'birthdate',
        'monthly_income',
        'professional_occupation',
        'address',
        'company_name',
        'trading_name',
        'annual_revenue',
        'corporation_type',
        'founding_date',
        'cnae',
        'main_address',
        'managing_partners',
    ]

    def __init__(self,
                 email=APIHelper.SKIP,
                 document=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 site_url=APIHelper.SKIP,
                 phone_numbers=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 mother_name=APIHelper.SKIP,
                 birthdate=APIHelper.SKIP,
                 monthly_income=APIHelper.SKIP,
                 professional_occupation=APIHelper.SKIP,
                 address=APIHelper.SKIP,
                 company_name=APIHelper.SKIP,
                 trading_name=APIHelper.SKIP,
                 annual_revenue=APIHelper.SKIP,
                 corporation_type=APIHelper.SKIP,
                 founding_date=APIHelper.SKIP,
                 cnae=APIHelper.SKIP,
                 main_address=APIHelper.SKIP,
                 managing_partners=APIHelper.SKIP):
        """Constructor for the GetRegisterInformationResponse class"""

        # Initialize members of the class
        if email is not APIHelper.SKIP:
            self.email = email 
        if document is not APIHelper.SKIP:
            self.document = document 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if site_url is not APIHelper.SKIP:
            self.site_url = site_url 
        if phone_numbers is not APIHelper.SKIP:
            self.phone_numbers = phone_numbers 
        if name is not APIHelper.SKIP:
            self.name = name 
        if mother_name is not APIHelper.SKIP:
            self.mother_name = mother_name 
        if birthdate is not APIHelper.SKIP:
            self.birthdate = birthdate 
        if monthly_income is not APIHelper.SKIP:
            self.monthly_income = monthly_income 
        if professional_occupation is not APIHelper.SKIP:
            self.professional_occupation = professional_occupation 
        if address is not APIHelper.SKIP:
            self.address = address 
        if company_name is not APIHelper.SKIP:
            self.company_name = company_name 
        if trading_name is not APIHelper.SKIP:
            self.trading_name = trading_name 
        if annual_revenue is not APIHelper.SKIP:
            self.annual_revenue = annual_revenue 
        if corporation_type is not APIHelper.SKIP:
            self.corporation_type = corporation_type 
        if founding_date is not APIHelper.SKIP:
            self.founding_date = founding_date 
        if cnae is not APIHelper.SKIP:
            self.cnae = cnae 
        if main_address is not APIHelper.SKIP:
            self.main_address = main_address 
        if managing_partners is not APIHelper.SKIP:
            self.managing_partners = managing_partners 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        email = dictionary.get("email") if "email" in dictionary.keys() else APIHelper.SKIP
        document = dictionary.get("document") if "document" in dictionary.keys() else APIHelper.SKIP
        mtype = dictionary.get("type") if "type" in dictionary.keys() else APIHelper.SKIP
        site_url = dictionary.get("site_url") if "site_url" in dictionary.keys() else APIHelper.SKIP
        if 'phone_numbers' in dictionary.keys():
            phone_numbers = [GetPhoneNumberResponse.from_dictionary(x) for x in dictionary.get('phone_numbers')] if dictionary.get('phone_numbers') else None
        else:
            phone_numbers = APIHelper.SKIP
        name = dictionary.get("name") if "name" in dictionary.keys() else APIHelper.SKIP
        mother_name = dictionary.get("mother_name") if "mother_name" in dictionary.keys() else APIHelper.SKIP
        birthdate = dictionary.get("birthdate") if "birthdate" in dictionary.keys() else APIHelper.SKIP
        monthly_income = dictionary.get("monthly_income") if "monthly_income" in dictionary.keys() else APIHelper.SKIP
        professional_occupation = dictionary.get("professional_occupation") if "professional_occupation" in dictionary.keys() else APIHelper.SKIP
        if 'address' in dictionary.keys():
            address = GetRegisterInformationAddressResponse.from_dictionary(dictionary.get('address')) if dictionary.get('address') else None
        else:
            address = APIHelper.SKIP
        company_name = dictionary.get("company_name") if "company_name" in dictionary.keys() else APIHelper.SKIP
        trading_name = dictionary.get("trading_name") if "trading_name" in dictionary.keys() else APIHelper.SKIP
        annual_revenue = dictionary.get("annual_revenue") if "annual_revenue" in dictionary.keys() else APIHelper.SKIP
        corporation_type = dictionary.get("corporation_type") if "corporation_type" in dictionary.keys() else APIHelper.SKIP
        founding_date = dictionary.get("founding_date") if "founding_date" in dictionary.keys() else APIHelper.SKIP
        cnae = dictionary.get("cnae") if "cnae" in dictionary.keys() else APIHelper.SKIP
        if 'main_address' in dictionary.keys():
            main_address = GetRegisterInformationAddressResponse.from_dictionary(dictionary.get('main_address')) if dictionary.get('main_address') else None
        else:
            main_address = APIHelper.SKIP
        if 'managing_partners' in dictionary.keys():
            managing_partners = [GetManagingPartnerResponse.from_dictionary(x) for x in dictionary.get('managing_partners')] if dictionary.get('managing_partners') else None
        else:
            managing_partners = APIHelper.SKIP
        # Return an object of this model
        return cls(email,
                   document,
                   mtype,
                   site_url,
                   phone_numbers,
                   name,
                   mother_name,
                   birthdate,
                   monthly_income,
                   professional_occupation,
                   address,
                   company_name,
                   trading_name,
                   annual_revenue,
                   corporation_type,
                   founding_date,
                   cnae,
                   main_address,
                   managing_partners)
