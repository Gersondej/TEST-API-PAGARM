# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper


class GetUsageReportResponse(object):

    """Implementation of the 'GetUsageReportResponse' model.

    TODO: type model description here.

    Attributes:
        url (str): TODO: type description here.
        usage_report_url (str): TODO: type description here.
        grouped_report_url (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "url": 'url',
        "usage_report_url": 'usage_report_url',
        "grouped_report_url": 'grouped_report_url'
    }

    _optionals = [
        'url',
        'usage_report_url',
        'grouped_report_url',
    ]

    _nullables = [
        'url',
        'usage_report_url',
        'grouped_report_url',
    ]

    def __init__(self,
                 url=APIHelper.SKIP,
                 usage_report_url=APIHelper.SKIP,
                 grouped_report_url=APIHelper.SKIP):
        """Constructor for the GetUsageReportResponse class"""

        # Initialize members of the class
        if url is not APIHelper.SKIP:
            self.url = url 
        if usage_report_url is not APIHelper.SKIP:
            self.usage_report_url = usage_report_url 
        if grouped_report_url is not APIHelper.SKIP:
            self.grouped_report_url = grouped_report_url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if dictionary is None:
            return None

        # Extract variables from the dictionary
        url = dictionary.get("url") if "url" in dictionary.keys() else APIHelper.SKIP
        usage_report_url = dictionary.get("usage_report_url") if "usage_report_url" in dictionary.keys() else APIHelper.SKIP
        grouped_report_url = dictionary.get("grouped_report_url") if "grouped_report_url" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(url,
                   usage_report_url,
                   grouped_report_url)
